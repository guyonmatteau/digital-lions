"""Update prod

Revision ID: 73bb889a315e
Revises: 279a9f1e7cc7
Create Date: 2024-07-05 15:59:14.524728

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "73bb889a315e"
down_revision: Union[str, None] = "279a9f1e7cc7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("attendance")
    op.drop_table("child")
    op.drop_table("workshop")
    op.drop_table("community")
    op.drop_index("ix_user_email_address", table_name="user")
    op.drop_table("user")
    op.add_column("children", sa.Column("is_active", sa.Boolean(), nullable=False))
    op.add_column(
        "children", sa.Column("last_updated_at", sa.DateTime(), nullable=False)
    )
    op.add_column("children", sa.Column("created_at", sa.DateTime(), nullable=False))
    op.add_column(
        "communities", sa.Column("last_updated_at", sa.DateTime(), nullable=False)
    )
    op.drop_column("communities", "updated_at")
    op.add_column("teams", sa.Column("is_active", sa.Boolean(), nullable=False))
    op.add_column("teams", sa.Column("last_updated_at", sa.DateTime(), nullable=False))
    op.add_column("teams", sa.Column("created_at", sa.DateTime(), nullable=False))
    op.alter_column("teams", "name", existing_type=sa.VARCHAR(), nullable=False)
    op.add_column("users", sa.Column("is_active", sa.Boolean(), nullable=False))
    op.add_column("users", sa.Column("last_updated_at", sa.DateTime(), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "last_updated_at")
    op.drop_column("users", "is_active")
    op.alter_column("teams", "name", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_column("teams", "created_at")
    op.drop_column("teams", "last_updated_at")
    op.drop_column("teams", "is_active")
    op.add_column(
        "communities",
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
    )
    op.drop_column("communities", "last_updated_at")
    op.drop_column("children", "created_at")
    op.drop_column("children", "last_updated_at")
    op.drop_column("children", "is_active")
    op.create_table(
        "user",
        sa.Column("first_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("last_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email_address", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
    )
    op.create_index("ix_user_email_address", "user", ["email_address"], unique=True)
    op.create_table(
        "community",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('community_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="community_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "attendance",
        sa.Column("child_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("attendance", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("workshop_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["child_id"], ["child.id"], name="attendance_child_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["workshop_id"], ["workshop.id"], name="attendance_workshop_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="attendance_pkey"),
    )
    op.create_table(
        "workshop",
        sa.Column("date", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("cycle", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("cancelled", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "cancellation_reason", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("community_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["community_id"], ["community.id"], name="workshop_community_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="workshop_pkey"),
    )
    op.create_table(
        "child",
        sa.Column("first_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("last_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("age", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("community_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["community_id"], ["community.id"], name="child_community_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="child_pkey"),
    )
    # ### end Alembic commands ###
